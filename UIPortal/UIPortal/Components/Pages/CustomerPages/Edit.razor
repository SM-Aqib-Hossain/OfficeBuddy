@attribute [StreamRendering]
@page "/customers/edit"

@using UIPortal.Components.Models


@using System.Net.Http.Json
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit Customer</PageTitle>

<h1>Edit Customer</h1>

<h2>@message</h2>

@if (customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    

     <EditForm Model="customer" OnValidSubmit="UpdateCustomer" FormName="editCustomerForm">
         <DataAnnotationsValidator />
         <ValidationSummary />

         <div class="mb-3">
             <label for="name" class="form-label">Name:</label>
             <InputText id="name" @bind="customer.Name" class="form-control" />
             <ValidationMessage For="() => customer.Name" class="text-danger" />
         </div>
         <div class="mb-3">
             <label for="city" class="form-label">City:</label>
             <InputText id="city" @bind="customer.City" class="form-control" />
             <ValidationMessage For="() => customer.City" class="text-danger" />
         </div>
         <div class="mb-3">
             <label for="password" class="form-label">Password:</label>
             <InputText id="password" @bind="customer.Password" class="form-control" />
             <ValidationMessage For="() => customer.Password" class="text-danger" />
         </div>
         <div class="mb-3">
             <label for="role" class="form-label">Role:</label>
             <InputText id="role" @bind="customer.Role" class="form-control" />
             <ValidationMessage For="() => customer.Role" class="text-danger" />
         </div>
        
         <button type="submit" class="btn btn-primary">Save</button>
     </EditForm>
}

<div>
    <a href="/view-all">Back to List</a>
</div>

@code {
    public string message = "";
    private UpdateCustomerDto? customer;

    [SupplyParameterFromQuery]
    public int Id { get; set; }



    protected override async Task OnInitializedAsync()
    {

        customer = await _httpClient.GetFromJsonAsync<UpdateCustomerDto>($"Customers/{Id}");

        if (customer != null)
        {
            message = "Customer found.";
        }
    }

    private async Task UpdateCustomer()
    {
        var response = await _httpClient.PutAsJsonAsync($"https://localhost:7011/api/Customers/update/{Id}", customer);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/view-all");
        }
        else
        {
            Console.WriteLine("Error updating customer.");
        }
    }
}
