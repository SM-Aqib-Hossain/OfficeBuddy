    @attribute [StreamRendering]

    @page "/customers/create"
    @using Microsoft.EntityFrameworkCore

    @using UIPortal.Components.Models
    @attribute [Authorize(Roles = "Admin")]
    @inject HttpClient _httpClient
    @inject IJSRuntime JSRuntime

    <PageTitle>Create Customer</PageTitle>

    <h1>Create Customer</h1>

    @if (showSuccessMessage == true)
    {
       <div class="alert alert-@typeOfAlert" role="alert">
           @Message
       </div>
    }

    <hr />

    <div class="row">
       <div class="col-md-6 offset-md-3">
           <EditForm method="post" Model="Customer" OnValidSubmit="AddCustomer" FormName="create">
               <DataAnnotationsValidator />
               <ValidationSummary class="text-danger" />
               <div class="mb-3">
                   <label for="name" class="form-label">Name:</label>
                   <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                   <ValidationMessage For="() => Customer.Name" class="text-danger" />
               </div>
               <div class="mb-3">
                   <label for="city" class="form-label">City:</label>
                   <InputText id="city" @bind-Value="Customer.City" class="form-control" />
                   <ValidationMessage For="() => Customer.City" class="text-danger" />
               </div>
               
             <div class="mb-3">
                 <label for="balance" class="form-label">Balance:</label>
                 <InputNumber id="balance" @bind-Value="Customer.Balance" class="form-control" />
                 <ValidationMessage For="() => Customer.Balance" class="text-danger" />
             </div>
               <div class="mb-3">
                   <label for="password" class="form-label">Password:</label>
                   <InputText id="password" @bind-Value="Customer.Password" type="password" class="form-control" />
                   <ValidationMessage For="() => Customer.Password" class="text-danger" />
               </div>

               <div class="mb-3">
                   <label for="role" class="form-label">Role:</label>
                   <InputSelect id="role" @bind-Value="Customer.Role" class="form-control">
                       <option value="User">User</option>
                       <option value="Admin">Admin</option>
                   </InputSelect>
                   <ValidationMessage For="() => Customer.Role" class="text-danger" />
               </div>
               <button type="submit" class="btn btn-primary w-100">Create</button>
           </EditForm>
       </div>
    </div>

    <div class="mt-3">
       <a href="/customers" class="btn btn-secondary">Back to List</a>
    </div>

    @code {
       [SupplyParameterFromForm]
       private CreateCustomerDto Customer { get; set; } = new();

       private string? typeOfAlert;
       private string? Message;
       private bool showSuccessMessage = false;

       private async Task AddCustomer()
       {
           try
           {
               // Sending POST request to the API
               var response = await _httpClient.PostAsJsonAsync("https://localhost:7011/api/Customers", Customer);

               if (response.IsSuccessStatusCode)
               {
                   // Show a success message
                   typeOfAlert = "success";
                   Message = "Customer added successfully!";
                   showSuccessMessage = true;
                   // Clear any previous errors

                   // Clear form fields
                   Customer = new CreateCustomerDto();

                   // Trigger UI refresh and wait for 5 seconds
                   StateHasChanged();
                   await Task.Delay(5000);

                   // Hide the success message after 5 seconds
                   showSuccessMessage = false;
                   StateHasChanged();
               }
               else
               {
                   typeOfAlert = "danger";
                   Message = "Failed to add the customer. Please try again.";
               
               }
           }
           catch (Exception ex)
           {
               // Handle any exceptions that occur during the request
               Message = $"An error occurred: {ex.Message}";
           
           }
       }
    }
