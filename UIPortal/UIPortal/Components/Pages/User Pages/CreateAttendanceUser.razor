@page "/user/attendance/submit"

@inject HttpClient _httpClient
@using System.Security.Claims
@using UIPortal.Components.Models
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [StreamRendering]
@attribute [Authorize(Roles = "User")]
<PageTitle>Submit Attendance</PageTitle>

<h1>Submit Attendance</h1>

@if (showSuccessMessage)
{
        <div class="alert alert-@typeOfAlert" role="alert">
        @Message
        </div>
}

<hr />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <EditForm Model="Attendance" OnValidSubmit="SubmitAttendance" FormName="SubmitAttendanceForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="employeeName" class="form-label">Employee Name:</label>
                <InputText id="employeeName" @bind-Value="Attendance.EmployeeName" class="form-control" disabled />
            </div>

            <div class="mb-3">
                <label for="employeeId" class="form-label">Employee ID:</label>
                <InputNumber id="employeeId" @bind-Value="Attendance.EmployeeId" class="form-control" disabled />
            </div>

            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Attendance.Date" class="form-control" disabled />
            </div>

            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputSelect id="status" @bind-Value="Attendance.Status" class="form-control" @onchange="OnStatusChange">
                    <option value="Present">Present</option>
                    <option value="Absent">Absent</option>
                    <option value="Leave">Leave</option>
                </InputSelect>
                <ValidationMessage For="() => Attendance.Status" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Submit Attendance</button>
        </EditForm>
    </div>
</div>

<div class="mt-3">
    <a href="/" class="btn btn-secondary">Back to Home</a>
</div>

<!-- Modal for Reason Input -->
<div class="modal fade" id="reasonModal" tabindex="-1" aria-labelledby="reasonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reasonModalLabel">Provide Reason</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="reason" class="form-label">Reason:</label>
                <textarea id="reason" class="form-control" @bind="Reason"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmReason">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private AttendanceDto Attendance { get; set; } = new();

    private string? Reason { get; set; }
    private string? typeOfAlert;
    private string? Message;
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract employee details from claims
        var nameClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        var idClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

        if (nameClaim != null)
        {
            Attendance.EmployeeName = nameClaim.Value;
        }

        if (idClaim != null && int.TryParse(idClaim.Value, out int id))
        {
            Attendance.EmployeeId = id;
        }

        // Set the current date as default
        Attendance.Date = DateTime.Now;
    }

    private void OnStatusChange(ChangeEventArgs e)
    {
        if (Attendance.Status == "Absent" || Attendance.Status == "Leave")
        {
            JS.InvokeVoidAsync("$(\"#reasonModal\").modal", "show");
        }
    }

    private async Task ConfirmReason()
    {
        JS.InvokeVoidAsync("$(\"#reasonModal\").modal", "hide");
        StateHasChanged();
        await SubmitAttendance();
    }

    private async Task SubmitAttendance()
    {
        try
        {
            // Step 1: Check if attendance already exists for the given date
            // var response = await _httpClient.GetAsync($"https:localhost:7011/api/Attendances/employee/{Attendance.EmployeeId}");
            // if (response.IsSuccessStatusCode)
            // {
            //     var existingRecords = await response.Content.ReadFromJsonAsync<List<AttendanceDto>>();
            //     if (existingRecords != null && existingRecords.Any(record => record.Date.Date == Attendance.Date.Date))
            //     {
            //         typeOfAlert = "warning";
            //         Message = "Attendance for the selected date is already submitted.";
            //         showSuccessMessage = true;
            //         StateHasChanged();
            //         await Task.Delay(3000);
            //         showSuccessMessage = false;
            //         StateHasChanged();
            //         return; Exit without submitting
            //     }
            // }

            // Step 2: Submit new attendance

            var createResponse = await _httpClient.PostAsJsonAsync("https://localhost:7011/api/Attendance/CreateNewAttendance", Attendance);

            if (createResponse.IsSuccessStatusCode)
            {
                typeOfAlert = "success";
                Message = "Attendance submitted successfully!";
                showSuccessMessage = true;

                Attendance.Status = null; // Clear status for new entry
                StateHasChanged();
                await Task.Delay(1000);
                showSuccessMessage = false;
                StateHasChanged();
            }
            else
            {
                typeOfAlert = "danger";
                Message = "Failed to submit attendance. Please try again.";
            }
        }
        catch (Exception ex)
        {
            typeOfAlert = "danger";
            Message = $"An error occurred: {ex.Message}";
            showSuccessMessage = true;
            StateHasChanged();
            await Task.Delay(3000);
            showSuccessMessage = false;
            StateHasChanged();
        }
    }
}
