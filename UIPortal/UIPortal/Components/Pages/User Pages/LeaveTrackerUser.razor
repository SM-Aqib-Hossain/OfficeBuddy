@page "/leave-tracker"
@using UIPortal.Components.Models

@inject HttpClient _httpClient
@using System.Security.Claims

<h3>Leave Tracker for @Employee.Name</h3>

<table class="table">
    <thead>
        <tr>
            <th>Month</th>
            <th>Days Present</th>
            <th>Sick Leave Used</th>
            <th>Casual Leave Used</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var month in months)
        {
            <tr>
                <td>@month</td>
                <td>@GetDaysPresent(month)</td>
                <td>@GetSickLeaveUsed(month)</td>
                <td>@GetCasualLeaveUsed(month)</td>
            </tr>
        }
    </tbody>
</table>

<p><strong>Remaining Casual Leave:</strong> CasualLeaveBalance</p>
<p><strong>Remaining Sick Leave:</strong> SickLeaveBalance</p>

@code {
    private EmployeeDto? Employee;
    private LeaveTrackerDto LeaveTracker { get; set; }
    private List<LeaveTrackerDto>? LeaveTrackerList;



    private List<string> months = new List<string> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };

    private int CasualLeaveBalance = 0;
    private int SickLeaveBalance = 0;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var employeeId = await GetEmployeeIdFromClaims();
            var response = await _httpClient.GetAsync($"https://localhost:7011/api/LeaveTracker/GetLeavesByEmployeeId/{employeeId}");

            if (response.IsSuccessStatusCode)
            {
                LeaveTrackerList = await response.Content.ReadFromJsonAsync<List<LeaveTrackerDto>>();
            }
            else
            {
                LeaveTrackerList = new List<LeaveTrackerDto>(); // Handle no records
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading attendance: {ex.Message}");
        }



        CasualLeaveBalance = 10 - LeaveTrackerList.Count(leave => leave.LeaveType == "Sick");
        SickLeaveBalance = 14 - LeaveTrackerList.Count(leave => leave.LeaveType == "Casual");

    }

    private async Task<int> GetEmployeeIdFromClaims()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var idClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
        return idClaim != null ? int.Parse(idClaim.Value) : 0;
    }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }






    private int GetDaysPresent(string month)
    {

    }

    private int GetSickLeaveUsed(string month)
    {
        int monthNumber = months.IndexOf(month) + 1;
        // Logic to calculate sick leave used in the month
        return LeaveTrackerList
            .Count(leave => leave.LeaveType == "Sick" && leave.LeaveDate.Month == monthNumber);
        
    }

    private int GetCasualLeaveUsed(string month)
    {
        int monthNumber = months.IndexOf(month) + 1;
        // Logic to calculate sick leave used in the month
        return LeaveTrackerList
            .Count(leave => leave.LeaveType == "Sick" && leave.LeaveDate.Month == monthNumber);

    }
}
