@page "/department/viewAllAndDelete"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Linq
@using UIPortal.Components.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject HttpClient _httpClient
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Departments</PageTitle>

<h1>Department List</h1>

@if (departments == null)
{
    <p>Loading...</p>
}
else if (!departments.Any())
{
    <p>No department records found.</p>
}
else
{
    <div class="mb-3 d-flex align-items-center">
        <!-- Dropdown for selecting the filter type -->
        <select @bind="selectedFilter" class="form-select me-3" style="width: 150px;">
            <option value="Name">Name</option>
            <option value="Location">Location</option>
        </select>

        <!-- Text input for entering the filter value -->
        <input type="text" @bind="searchValue" placeholder="Enter search term..." class="form-control me-3" style="width: 300px;" @oninput="FilterDepartments" />

        <!-- Optional: Button to clear the filter -->
        <button class="btn btn-outline-secondary" @onclick="ClearFilter">Clear Filter</button>
    </div>

    <QuickGrid Items="filteredDepartments" Pagination="state" Class="table table-striped table-hover">
        <PropertyColumn Title="ID" Property="record => record.Id" Sortable="true" Class="col-3" />
        <PropertyColumn Title="Name" Property="record => record.Name" Sortable="true" Class="col-3" />
        <PropertyColumn Title="Location" Property="record => record.Location" Sortable="true" Class="col-3" />
        <PropertyColumn Title="Employee Count" Property="record => record.EmployeeId.Count" Sortable="true" Class="col-3" />

        <TemplateColumn Title="Action" Context="record">
            <a href="@($"/department/details?id={record.Id}")" class="btn btn-primary btn-sm">Details</a>
            <a href="@($"department/edit?id={record.Id}")" class="btn btn-primary btn-sm">Edit</a>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteDepartment(record.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="state" />
}

@code {
    PaginationState state = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<DepartmentDto> departments;
    private IQueryable<DepartmentDto> filteredDepartments;

    private string selectedFilter = "Name"; // Default filter type
    private string searchValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var departmentList = await _httpClient.GetFromJsonAsync<List<DepartmentDto>>("https://localhost:7011/GetAllDepartmentsAsync");
            departments = departmentList.AsQueryable();
            filteredDepartments = departments;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching department records: {ex.Message}");
        }
    }

    private void FilterDepartments(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(searchValue))
        {
            filteredDepartments = departments;
        }
        else
        {
            switch (selectedFilter)
            {
                case "Name":
                    filteredDepartments = departments
                        .Where(r => r.Name != null && r.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                case "Location":
                    filteredDepartments = departments
                        .Where(r => r.Location != null && r.Location.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                default:
                    filteredDepartments = departments;
                    break;
            }
        }
        StateHasChanged();
    }

    private void ClearFilter()
    {
        searchValue = string.Empty;
        filteredDepartments = departments;
        StateHasChanged();
    }

    private async Task DeleteDepartment(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this department record?");
        if (!confirmed)
        {
            return;
        }

        try
        {
            var response = await _httpClient.DeleteAsync($"https://localhost:7011/DeleteDepartment/{id}");

            if (response.IsSuccessStatusCode)
            {
                departments = departments.Where(r => r.Id != id).AsQueryable();
                filteredDepartments = filteredDepartments.Where(r => r.Id != id).AsQueryable();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error deleting the department record.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting department record: {ex.Message}");
        }
    }
}
