@page "/department/create"
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

@using UIPortal.Components.Models
@inject HttpClient _httpClient
@inject IJSRuntime JSRuntime

<PageTitle>Create Department</PageTitle>

<h1>Create Department</h1>

@if (showSuccessMessage)
{
    <div class="alert alert-@typeOfAlert" role="alert">
        @Message
    </div>
}

<hr />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <EditForm Model="Department" OnValidSubmit="AddDepartment" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="name" class="form-label">Department Name:</label>
                <InputText id="name" @bind-Value="Department.Name" class="form-control" />
                <ValidationMessage For="() => Department.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location:</label>
                <InputText id="location" @bind-Value="Department.Location" class="form-control" />
                <ValidationMessage For="() => Department.Location" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="employeeIds" class="form-label">Employee IDs (comma-separated):</label>
                <InputText id="employeeIds" @bind-Value="Department.EmployeeIdsInput" class="form-control" />
                <ValidationMessage For="() => Department.EmployeeIdsInput" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Create</button>
        </EditForm>
    </div>
</div>

<div class="mt-3">
    <a href="/departments" class="btn btn-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private DepartmentDto Department { get; set; } = new();

    private string employeeIdsInput = string.Empty; // Holds comma-separated Employee IDs
    private string? typeOfAlert;
    private string? Message;
    private bool showSuccessMessage = false;

    private async Task AddDepartment()
    {
        try
        {
            // Parse Employee IDs from input
            if (!string.IsNullOrEmpty(Department.EmployeeIdsInput))
            {
                Department.EmployeeId = Department.EmployeeIdsInput
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(id => int.TryParse(id.Trim(), out var parsedId) ? parsedId : (int?)null)
                    .Where(id => id.HasValue)
                    .Select(id => id.Value)
                    .ToList();
            }
            else
            {
                Department.EmployeeId = new List<int>();
            }

            // Sending POST request to the API
            var response = await _httpClient.PostAsJsonAsync("https://localhost:7011/AddDepartment", Department);

            if (response.IsSuccessStatusCode)
            {
                // Show a success message
                typeOfAlert = "success";
                Message = "Department created successfully!";
                showSuccessMessage = true;

                // Clear form fields
                Department = new DepartmentDto();
                employeeIdsInput = string.Empty;

                // Trigger UI refresh and wait for 5 seconds
                StateHasChanged();
                await Task.Delay(5000);

                // Hide the success message
                showSuccessMessage = false;
                StateHasChanged();
            }
            else
            {
                typeOfAlert = "danger";
                Message = "Failed to create the department. Please try again.";
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Message = $"An error occurred: {ex.Message}";
        }
    }
}
