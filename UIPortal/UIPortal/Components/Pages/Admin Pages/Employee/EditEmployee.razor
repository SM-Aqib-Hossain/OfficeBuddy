@page "/employees/edit"
<!--RENDER MODE-->
@rendermode InteractiveServer
<!--RENDER MODE-->

@using UIPortal.Components.Models
@using System.Net.Http.Json
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit Employee</PageTitle>

<h1>Edit Employee</h1>

<h2>@message</h2>

@if (employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="UpdateEmployee" FormName="editEmployeeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" @bind-Value="employee.Name" class="form-control" />
            <ValidationMessage For="@(() => employee.Name)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="city" class="form-label">City:</label>
            <InputText id="city" @bind-Value="employee.City" class="form-control" />
            <ValidationMessage For="@(() => employee.City)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="role" class="form-label">Role:</label>
            <InputText id="role" @bind-Value="employee.Role" class="form-control" />
            <ValidationMessage For="@(() => employee.Role)" class="text-danger" />
        </div>

<div class="mb-3">
    
    <InputNumber id="balance" @bind-Value="employee.Balance" class="form-control" style="display: none;" />
    <ValidationMessage For="@(() => employee.Balance)" class="text-danger" />
</div>

        <div class="mb-3">
            <label for="department" class="form-label">Department Name:</label>
            <InputText id="department" @bind-Value="employee.DepartmentName" class="form-control" />
            <ValidationMessage For="@(() => employee.DepartmentName)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="joiningDate" class="form-label">Joining Date:</label>
            <InputDate id="joiningDate" @bind-Value="employee.JoiningDate" class="form-control" />
            <ValidationMessage For="@(() => employee.JoiningDate)" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    public string message = "";
    private EmployeeDto? employee;
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employee = await _httpClient.GetFromJsonAsync<EmployeeDto>($"https://localhost:7011/api/Employees/{Id}");

        if (employee != null)
        {
            message = "Employee found.";
        }
        else
        {
            message = "Employee not found.";
        }
        // Always set Balance to 0
        employee.Balance = 0;
    }

    private async Task UpdateEmployee()
    {
        var response = await _httpClient.PutAsJsonAsync($"https://localhost:7011/UpdateEmployee/{Id}", employee);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/employees/viewAllAndDelete");
        }
        else
        {
            Console.WriteLine("Error updating employee.");
        }
    }
}
