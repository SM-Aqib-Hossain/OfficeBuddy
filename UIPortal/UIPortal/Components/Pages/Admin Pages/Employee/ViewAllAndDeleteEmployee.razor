@page "/employees/viewAllAndDelete"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Linq
@using UIPortal.Components.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject HttpClient _httpClient
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Employees</PageTitle>

<h1>Employee List</h1>

@if (employees == null)
{
    <p>Loading...</p>
}
else if (!employees.Any())
{
    <p>No employee records found.</p>
}
else
{
    <div class="mb-3 d-flex align-items-center">
        <!-- Dropdown for selecting the filter type -->
        <select @bind="selectedFilter" class="form-select me-3" style="width: 150px;">
            <option value="Name">Name</option>
            <option value="City">City</option>
            <option value="Role">Role</option>
            <option value="DepartmentName">Department</option>
        </select>

        <!-- Text input for entering the filter value -->
        <input type="text" @bind="searchValue" placeholder="Enter search term..." class="form-control me-3" style="width: 300px;" @oninput="FilterEmployees" />

        <!-- Optional: Button to clear the filter -->
        <button class="btn btn-outline-secondary" @onclick="ClearFilter">Clear Filter</button>
    </div>

    <QuickGrid Items="filteredEmployees" Pagination="state" Class="table table-striped table-hover">
        <PropertyColumn Title="ID" Property="record => record.Id" Sortable="true" Class="col-2" />
        <PropertyColumn Title="Name" Property="record => record.Name" Sortable="true" Class="col-3" />
        <PropertyColumn Title="City" Property="record => record.City" Sortable="true" Class="col-3" />
        <PropertyColumn Title="Role" Property="record => record.Role" Sortable="true" Class="col-2" />
        <PropertyColumn Title="Department" Property="record => record.DepartmentName" Sortable="true" Class="col-2" />

        <TemplateColumn Title="Action" Context="record">
            <a href="@($"/employees/details?id={record.Id}")" class="btn btn-primary btn-sm">Details</a>
            <a href="@($"/employees/edit?id={record.Id}")" class="btn btn-primary btn-sm">Edit</a>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(record.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="state" />
}

@code {
    PaginationState state = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<EmployeeDto> employees;
    private IQueryable<EmployeeDto> filteredEmployees;

    private List<int> employeeListHolder = new List<int>();

    private string selectedFilter = "Name"; // Default filter type
    private string searchValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var employeeList = await _httpClient.GetFromJsonAsync<List<EmployeeDto>>("https://localhost:7011/GetEmployees");
            employees = employeeList.AsQueryable();
            filteredEmployees = employees;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee records: {ex.Message}");
        }
    }

    private void FilterEmployees(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(searchValue))
        {
            filteredEmployees = employees;
        }
        else
        {
            switch (selectedFilter)
            {
                case "Name":
                    filteredEmployees = employees
                        .Where(r => r.Name != null && r.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                case "City":
                    filteredEmployees = employees
                        .Where(r => r.City != null && r.City.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                case "Role":
                    filteredEmployees = employees
                        .Where(r => r.Role != null && r.Role.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                case "DepartmentName":
                    filteredEmployees = employees
                        .Where(r => r.DepartmentName != null && r.DepartmentName.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                default:
                    filteredEmployees = employees;
                    break;
            }
        }
        StateHasChanged();
    }

    private void ClearFilter()
    {
        searchValue = string.Empty;
        filteredEmployees = employees;
        StateHasChanged();
    }

    private async Task DeleteEmployee(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee record?");
        if (!confirmed)
        {
            return;
        }

        try
        {
            // Fetch the employee details to get the DepartmentId
            var employee = await _httpClient.GetFromJsonAsync<EmployeeDto>($"https://localhost:7011/api/Employees/{id}");
            if (employee == null)
            {
                Console.WriteLine("Error: Employee not found.");
                return;
            }

            int deptId = employee.DepartmentId;

            // Delete the employee
            var response = await _httpClient.DeleteAsync($"https://localhost:7011/DeleteEmployee/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Update the department after deleting the employee
                var department = await _httpClient.GetFromJsonAsync<DepartmentDto>($"https://localhost:7011/GetDepartmentById/{deptId}");
                if (department != null)
                {

                    foreach(int item in department.EmployeeId)
                    {
                        if(item != id)
                        {
                            employeeListHolder.Add(item);
                        }
                    }


                    foreach (int item in employeeListHolder)
                    {
                        department.EmployeeId.Add(item);
                    }

                    // Remove the employee ID from the department's EmployeeId list
                    // department.EmployeeId = department.EmployeeId?.Where(eId => eId != id).ToList();

                    // Update the department
                    var updateResponse = await _httpClient.PutAsJsonAsync($"https://localhost:7011/UpdateDepartment/{deptId}", department);
                    if (!updateResponse.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Error updating department with ID {deptId}");
                    }
                }

                // Update the UI to reflect the deletion
                // employees = employees.Where(r => r.Id != id).AsQueryable();
                // filteredEmployees = filteredEmployees.Where(r => r.Id != id).AsQueryable();
                // StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error deleting the employee record.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting employee record: {ex.Message}");
        }
    }

}
