@attribute [StreamRendering]

@page "/employees/create"
@using Microsoft.EntityFrameworkCore
@using UIPortal.Components.Models
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient _httpClient
@inject IJSRuntime JSRuntime

<PageTitle>Create Employee</PageTitle>

<h1>Create Employee</h1>

@if (showSuccessMessage == true)
{
    <div class="alert alert-@typeOfAlert" role="alert">
        @Message
    </div>
}

<hr />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <EditForm method="post" Model="Employee" OnValidSubmit="AddEmployee" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Employee.Name" class="form-control" />
                <ValidationMessage For="() => Employee.Name" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="city" class="form-label">City:</label>
                <InputText id="city" @bind-Value="Employee.City" class="form-control" />
                <ValidationMessage For="() => Employee.City" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="balance" class="form-label">Balance:</label>
                <InputNumber id="balance" @bind-Value="Employee.Balance" class="form-control" />
                <ValidationMessage For="() => Employee.Balance" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="Employee.Password" type="password" class="form-control" />
                <ValidationMessage For="() => Employee.Password" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Role:</label>
                <InputSelect id="role" @bind-Value="Employee.Role" class="form-control">
                    <option value="User">User</option>
                    <option value="Admin">Admin</option>
                </InputSelect>
                <ValidationMessage For="() => Employee.Role" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="departmentId" class="form-label">Department ID:</label>
                <InputNumber id="departmentId" @bind-Value="Employee.DepartmentId" class="form-control" />
                <ValidationMessage For="() => Employee.DepartmentId" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="departmentName" class="form-label">Department Name:</label>
                <InputText id="departmentName" @bind-Value="Employee.DepartmentName" class="form-control" />
                <ValidationMessage For="() => Employee.DepartmentName" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Create</button>
        </EditForm>
    </div>
</div>

<div class="mt-3">
    <a href="/employees" class="btn btn-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private EmployeeDto Employee { get; set; } = new();
    private DepartmentDto departmentDto;
    private string? typeOfAlert;
    private string? Message;
    private bool showSuccessMessage = false;

    private int deptId;

    private async Task AddEmployee()
    {
        try
        {
            // Sending POST request to the API
            var response = await _httpClient.PostAsJsonAsync("https://localhost:7011/AddEmployee", Employee);

            if (response.IsSuccessStatusCode)
            {
                deptId = Employee.DepartmentId;
                // Show a success message
                typeOfAlert = "success";
                Message = "Employee added successfully!";
                showSuccessMessage = true;

                // Clear form fields
                Employee = new EmployeeDto();

                // Trigger UI refresh and wait for 5 seconds
                StateHasChanged();
                await Task.Delay(5000);

                // Hide the success message after 5 seconds
                showSuccessMessage = false;
                StateHasChanged();
            }
            else
            {
                typeOfAlert = "danger";
                Message = "Failed to add the employee. Please try again.";
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the request
            Message = $"An error occurred: {ex.Message}";
            typeOfAlert = "danger";
            showSuccessMessage = true;
        }
    }
}
