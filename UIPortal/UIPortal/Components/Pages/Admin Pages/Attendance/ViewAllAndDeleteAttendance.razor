    @page "/attendance/viewAllAndDelete"
    @using System.Net.Http.Json
    @using Microsoft.AspNetCore.Components.QuickGrid
    @using System.Linq
    @using UIPortal.Components.Models
    @attribute [Authorize(Roles = "Admin")]
    @inject NavigationManager Navigation
    @inject HttpClient _httpClient
    @inject IJSRuntime JS

    @rendermode InteractiveServer

    <PageTitle>Attendance</PageTitle>

    <h1>Attendance List</h1>

    @if (attendanceRecords == null)
    {
        <p>Loading...</p>
    }
    else if (!attendanceRecords.Any())
    {
        <p>No attendance records found.</p>
    }
    else
    {
    <div class="mb-3 d-flex align-items-center">
        <!-- Dropdown for selecting the filter type -->
        <select @bind="selectedFilter" class="form-select me-3" style="width: 150px;">
            <option value="Name">Name</option>
            <option value="EmployeeId">Employee ID</option>
            <option value="Status">Status</option>
        </select>

        <!-- Text input for entering the filter value -->
        <input type="text" @bind="searchValue" placeholder="Enter search term..." class="form-control me-3" style="width: 300px;" @oninput="FilterAttendance" />

        <!-- Optional: Button to clear the filter -->
        <button class="btn btn-outline-secondary" @onclick="ClearFilter">Clear Filter</button>
    </div>

    <QuickGrid Items="filteredAttendance" Pagination="state" Class="table table-striped table-hover">
        <PropertyColumn Title="ID" Property="record => record.Id" Sortable="true" Class="col-2" />
        <PropertyColumn Title="Employee Name" Property="record => record.EmployeeName" Sortable="true" Class="col-2" />
        <PropertyColumn Title="Employee ID" Property="record => record.EmployeeId" Sortable="true" Class="col-2" />
        <PropertyColumn Title="Date" Property="record => record.Date.ToShortDateString()" Sortable="true" Class="col-2" />


        <PropertyColumn Title="Status" Property="record => record.Status" Sortable="true" Class="col-2" />

        <TemplateColumn Title="Action" Context="record">
            <a href="@($"attendance/edit?id={record.Id}")" class="btn btn-primary btn-sm">Edit</a>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAttendance(record.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="state" />

    }

@code {
    PaginationState state = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<AttendanceDto> attendanceRecords;
    private IQueryable<AttendanceDto> filteredAttendance;

    private string selectedFilter = "Name"; // Default filter type
    private string searchValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var attendanceList = await _httpClient.GetFromJsonAsync<List<AttendanceDto>>("https://localhost:7011/api/Attendances");
            attendanceRecords = attendanceList.AsQueryable();
            filteredAttendance = attendanceRecords;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching attendance records: {ex.Message}");
        }
    }

    private void FilterAttendance(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(searchValue))
        {
            filteredAttendance = attendanceRecords;
        }
        else
        {
            switch (selectedFilter)
            {
                case "Name":
                    filteredAttendance = attendanceRecords
                        .Where(r => r.EmployeeName.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                case "EmployeeId":
                    if (int.TryParse(searchValue, out int employeeId))
                    {
                        filteredAttendance = attendanceRecords
                            .Where(r => r.EmployeeId == employeeId)
                            .AsQueryable();
                    }
                    else
                    {
                        filteredAttendance = attendanceRecords.Where(r => false).AsQueryable(); // No match
                    }
                    break;

                case "Status":
                    filteredAttendance = attendanceRecords
                        .Where(r => r.Status.Equals(searchValue, StringComparison.OrdinalIgnoreCase))
                        .AsQueryable();
                    break;

                default:
                    filteredAttendance = attendanceRecords;
                    break;
            }
        }
        StateHasChanged();
    }

    private void ClearFilter()
    {
        searchValue = string.Empty;
        filteredAttendance = attendanceRecords;
        StateHasChanged();
    }

    private async Task DeleteAttendance(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this attendance record?");
        if (!confirmed)
        {
            return;
        }

        try
        {
            var response = await _httpClient.DeleteAsync($"https://localhost:7011/api/Attendances/{id}");

            if (response.IsSuccessStatusCode)
            {
                attendanceRecords = attendanceRecords.Where(r => r.Id != id).AsQueryable();
                filteredAttendance = filteredAttendance.Where(r => r.Id != id).AsQueryable();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error deleting the attendance record.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting attendance record: {ex.Message}");
        }
    }
}
