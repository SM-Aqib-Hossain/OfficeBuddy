@attribute [StreamRendering]

@page "/attendance/create"
@using UIPortal.Components.Models
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient _httpClient

<PageTitle>Create Attendance</PageTitle>

<h1>Create Attendance</h1>

@if (showSuccessMessage)
{
    <div class="alert alert-@typeOfAlert" role="alert">
        @Message
    </div>
}

<hr />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <EditForm Model="Attendance" OnValidSubmit="AddAttendance" FormName="CreateAttendanceForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="employeeName" class="form-label">Employee Name:</label>
                <InputText id="employeeName" @bind-Value="Attendance.EmployeeName" class="form-control" />
                <ValidationMessage For="() => Attendance.EmployeeName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="employeeId" class="form-label">Employee ID:</label>
                <InputNumber id="employeeId" @bind-Value="Attendance.EmployeeId" class="form-control" />
                <ValidationMessage For="() => Attendance.EmployeeId" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Attendance.Date" class="form-control" />
                <ValidationMessage For="() => Attendance.Date" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputSelect id="status" @bind-Value="Attendance.Status" class="form-control">
                    <option value="Present">Present</option>
                    <option value="Absent">Absent</option>
                    <option value="Leave">Leave</option>
                </InputSelect>
                <ValidationMessage For="() => Attendance.Status" class="text-danger" />
            </div>
                
            <button type="submit" class="btn btn-primary w-100">Create</button>
        </EditForm>

    </div>
</div>

<div class="mt-3">
    <a href="/attendance" class="btn btn-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    //ad;ksjdlaskdj
    private AttendanceDto Attendance { get; set; } = new();

    // private string EntryTimeProxy
    // {
    //     get => new DateTime(1, 1, 1, Attendance.EntryTime.Hours, Attendance.EntryTime.Minutes, 0).ToString("HH:mm");
    //     set
    //     {
    //         if (DateTime.TryParse(value, out var time))
    //         {
    //             Attendance.EntryTime = new TimeSpan(time.Hour, time.Minute, 0);
    //         }
    //     }
    // }

    // private string ExitTimeProxy
    // {
    //     get => new DateTime(1, 1, 1, Attendance.ExitTime.Hours, Attendance.ExitTime.Minutes, 0).ToString("HH:mm");
    //     set
    //     {
    //         if (DateTime.TryParse(value, out var time))
    //         {
    //             Attendance.ExitTime = new TimeSpan(time.Hour, time.Minute, 0);
    //         }
    //     }
    // }

    private string? typeOfAlert;
    private string? Message;
    private bool showSuccessMessage = false;

    private async Task AddAttendance()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("https://localhost:7011/api/Attendance/CreateNewAttendance", Attendance);

            if (response.IsSuccessStatusCode)
            {
                typeOfAlert = "success";
                Message = "Attendance created successfully!";
                showSuccessMessage = true;
                Attendance = new AttendanceDto();
                StateHasChanged();
                await Task.Delay(5000);
                showSuccessMessage = false;
                StateHasChanged();
            }
            else
            {
                typeOfAlert = "danger";
                Message = "Failed to create attendance. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }
}
