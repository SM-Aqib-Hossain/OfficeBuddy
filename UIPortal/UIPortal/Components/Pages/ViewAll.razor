@page "/view-all"

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Linq
@using UIPortal.Components.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject HttpClient _httpClient
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Customer List</h1>


@if (customers == null)
{
    <p>Loading...</p>
}
else if (!customers.Any())
{
    <p>No customers found.</p>
}
else
{
    <div class="mb-3">
    <input type="text" @bind="searchTerm" placeholder="Search by name..." class="form-control" @oninput="FilterCustomers" />
</div>

    <QuickGrid Items="filteredCustomers" Pagination="state" Class="table table-striped table-hover">
        <PropertyColumn Title="ID" Property="customer => customer.Id" Class="col-2" />
        <PropertyColumn Title="Name" Property="customer => customer.Name" Class="col-2" />
        <PropertyColumn Title="Balance" Property="customer => customer.Balance" Class="col-2" />
        <PropertyColumn Title="City" Property="customer => customer.City" Class="col-2" />

        <TemplateColumn Title="Action" Context="customer">
            <a href="@($"customers/edit?id={customer.Id}")" class="btn btn-primary btn-sm ">Edit</a>
            <a href="@($"customers/details?id={customer.Id}")" class="btn btn-info btn-sm ">Details</a>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="state" />
}

@code {
    PaginationState state = new PaginationState { ItemsPerPage = 5 };
    private IQueryable<CustomerDto> customers;
    private IQueryable<CustomerDto> filteredCustomers;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch data from API as List and convert it to IQueryable
            var customerList = await _httpClient.GetFromJsonAsync<List<CustomerDto>>("Customers");
            customers = customerList.AsQueryable();
            filteredCustomers = customers;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private void FilterCustomers(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).AsQueryable();
        }
        StateHasChanged();
    }

    private async Task DeleteCustomer(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (!confirmed)
        {
            return;
        }

        try
        {
            var response = await _httpClient.DeleteAsync($"Customers/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted customer from the current list
                customers = customers.Where(c => c.Id != id).AsQueryable();
                filteredCustomers = filteredCustomers.Where(c => c.Id != id).AsQueryable();
                StateHasChanged(); // Re-render the component to reflect changes
            }
            else
            {
                Console.WriteLine("Error deleting the customer.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting customer: {ex.Message}");
        }
    }
}
