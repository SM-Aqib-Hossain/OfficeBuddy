@page "/view-all"

@using BusinessLogicLayer.Dto
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Linq
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject HttpClient _httpClient
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Customer List</h1>

@if (customers == null)
{
    <p>Loading...</p>
}
else if (!customers.Any())
{
    <p>No customers found.</p>
}
else
{
    <QuickGrid Items="customers" Pagination="state">
        <PropertyColumn Title="ID" Property="customer => customer.Id" />
        <PropertyColumn Title="Name" Property="customer => customer.Name" />
        <PropertyColumn Title="City" Property="customer => customer.City" />

        <TemplateColumn Title="Action" Context="customer">
            <a href="@($"/customers/edit?id={customer.Id}")" class="btn btn-primary">Edit</a>
            <a href="@($"customers/details?id={customer.Id}")" class="btn btn-info">Details</a>
            <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="state" />
}

@code {
    PaginationState state = new PaginationState { ItemsPerPage = 5 };
    private IQueryable<CustomerDto> customers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch data from API as List and convert it to IQueryable
            var customerList = await _httpClient.GetFromJsonAsync<List<CustomerDto>>("Customers");
            customers = customerList.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private async Task DeleteCustomer(int id)
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"Customers/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted customer from the current list
                customers = customers.Where(c => c.Id != id).AsQueryable();
                StateHasChanged(); // Re-render the component to reflect changes
            }
            else
            {
                Console.WriteLine("Error deleting the customer.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting customer: {ex.Message}");
        }
    }
}
