@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using UIPortal.Components.Models
@inject HttpClient _httpClient

@inject NavigationManager Navigation

<h3 class="text-center">Login</h3>

<div class="row justify-content-center">
    <div class="col-lg-4 pt-4 pb-4 border rounded shadow-sm">
        <EditForm Model="loginRequestDto" OnValidSubmit="Authenticate" FormName="testLoginForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value="loginRequestDto.Name" class="form-control" placeholder="Enter your name" />
                <ValidationMessage For="@(() => loginRequestDto.Name)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="loginRequestDto.Password" placeholder="Enter your password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginRequestDto.Password)" class="text-danger" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginRequestDto loginRequestDto { get; set; } = new();

    private string? errorMessage;

    public async Task Authenticate()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("https://localhost:7011/api/Employees/authenticate", loginRequestDto);

            if (response.IsSuccessStatusCode)
            {
                var customer = await response.Content.ReadFromJsonAsync<CustomerDto>();

                var claims = new List<Claim>
                {
                        new Claim(ClaimTypes.Name, customer.Name),
                        new Claim(ClaimTypes.Role, customer.Role),
                        new Claim(ClaimTypes.NameIdentifier, customer.Id.ToString()) 
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                if (HttpContext != null)
                {
                    await HttpContext.SignInAsync(principal);
                }
            }
            else
            {
                errorMessage = "Invalid name or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        Navigation.NavigateTo("/");
    }
}
