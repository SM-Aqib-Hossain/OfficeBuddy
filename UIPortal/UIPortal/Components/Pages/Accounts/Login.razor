@page "/login"
@using BusinessLogicLayer.Dto
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject HttpClient _httpClient

@inject NavigationManager Navigation


<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="loginRequestDto" OnValidSubmit="Authenticate" FormName="testLoginForm">
            <DataAnnotationsValidator />

            
            <div class="mb-3">
                <label>Name</label>
                <InputText @bind-Value="loginRequestDto.Name" class="form-control" placeholder="Name" />
                <ValidationMessage For="@(() => loginRequestDto.Name)" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="loginRequestDto.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginRequestDto.Password)" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
    <div class="mb-3 text-center">
        <span class="text-danger">@errorMessage</span>
    </div>
</div>


@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    // 'https:localhost:7011/api/Customers/authenticate'
    // api/ projonto ase
    [SupplyParameterFromForm]
    public LoginRequestDto loginRequestDto { get; set;  } = new();

    private string? errorMessage;

    // public async Task Authenticate()
    // {

    //     try
    //     {
    //         Sending POST request to the API
    //         var response = await _httpClient.PostAsJsonAsync("Customers/authenticate", loginRequestDto);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             Successfully authenticated, read customer details (if needed)
    //             var customer = await response.Content.ReadFromJsonAsync<CustomerDto>();

    //             var claims = new List<Claim>
    //             {
    //                 new Claim(ClaimTypes.Name, customer.Name),
    //                 new Claim(ClaimTypes.Role, customer.Role)
    //             };

    //             var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
    //             var principal = new ClaimsPrincipal(identity);

    //             await HttpContext.SignInAsync(principal);
    //             Console.WriteLine("Login successful.");
    //             errorMessage = "Login successful.";
    //             await Task.Delay(500);

    //             StateHasChanged();

    //         }
    //         else
    //         {

    //             errorMessage = "Invalid name or password.";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Handle any other errors
    //         errorMessage = $"An error occurred: {ex.Message}";
    //         Console.WriteLine($"Error during authentication: {ex.Message}");
    //     }
    // }

    // public void StateHasChanged()
    // {
    //     Navigation.NavigateTo("/");
    // }
    public async Task Authenticate()
    {
        try
        {
            // Sending POST request to the API
            var response = await _httpClient.PostAsJsonAsync("Customers/authenticate", loginRequestDto);

            if (response.IsSuccessStatusCode)
            {
               
                var customer = await response.Content.ReadFromJsonAsync<CustomerDto>();

                var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, customer.Name),
                new Claim(ClaimTypes.Role, customer.Role)
            };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                if (HttpContext != null)
                {
                    await HttpContext.SignInAsync(principal);
                }

                // Navigate after successful login
                // await InvokeAsync(() => Navigation.NavigateTo("/"));
            }
            else
            {
                errorMessage = "Invalid name or password.";
            }
        }
        catch (Exception ex)
        {
            // Handle any other errors
            errorMessage = $"An error occurred: {ex.Message}";
        }
        Navigation.NavigateTo("/");
    }

}


